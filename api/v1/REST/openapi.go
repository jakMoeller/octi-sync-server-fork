// Package REST provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220912230023-4a1477f6a8ba DO NOT EDIT.
package REST

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	DeviceAuthScopes = "deviceAuth.Scopes"
)

// Defines values for HealthResult.
const (
	Down HealthResult = "Down"
	Up   HealthResult = "Up"
)

// Device a device
type Device struct {
	// Id Device ID is the unique identifier for a remote device
	Id DeviceID `json:"id"`
}

// DeviceID Device ID is the unique identifier for a remote device
type DeviceID = openapi_types.UUID

// DeviceList list of devices
type DeviceList struct {
	// Count Amount of Items contained in List
	Count ListItemCount `json:"count"`

	// Items array of devices, it will always at least contain the device of the authenticated user
	Items []Device `json:"items"`
}

// HealthAggregation defines model for HealthAggregation.
type HealthAggregation struct {
	// Components The different Components of the Server
	Components *[]HealthAggregationComponent `json:"components,omitempty"`

	// Health A Health Check Result
	Health HealthResult `json:"health"`
}

// HealthAggregationComponent defines model for HealthAggregationComponent.
type HealthAggregationComponent struct {
	// Health A Health Check Result
	Health HealthResult `json:"health"`

	// Name The Name of the Component to be Health Checked
	Name string `json:"name"`
}

// HealthResult A Health Check Result
type HealthResult string

// ListItemCount Amount of Items contained in List
type ListItemCount = int

// ModifiedAtTimestamp A Timestamp indicating when a datum was last modified
type ModifiedAtTimestamp = time.Time

// ModuleDataStream Module Data Stream
type ModuleDataStream = openapi_types.File

// ModuleName Module Name
type ModuleName = string

// RegistrationResult defines model for RegistrationResult.
type RegistrationResult struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ShareResponse defines model for ShareResponse.
type ShareResponse struct {
	ShareCode *string `json:"shareCode,omitempty"`
}

// DeviceIDQuery Device ID is the unique identifier for a remote device
type DeviceIDQuery = DeviceID

// ShareCode defines model for ShareCode.
type ShareCode = string

// XDeviceID Device ID is the unique identifier for a remote device
type XDeviceID = DeviceID

// DeviceListResponse list of devices
type DeviceListResponse = DeviceList

// ModuleDataAccepted An Empty JSON
type ModuleDataAccepted = interface{}

// ModuleDeletionAccepted An Empty JSON
type ModuleDeletionAccepted = interface{}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	// Share The Share Code from the Share API. If presented in combination with a new Device ID,
	// it can be used to add new devices to an account.
	Share *ShareCode `form:"share,omitempty" json:"share,omitempty"`

	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ShareParams defines parameters for Share.
type ShareParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetDevicesParams defines parameters for GetDevices.
type GetDevicesParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// DeleteModulesParams defines parameters for DeleteModules.
type DeleteModulesParams struct {
	// DeviceId Device Identifier to use for the Query. If given, takes precedence over X-Device-ID or other hints.
	// Use to query data from devices in your account from another account.
	DeviceId *DeviceIDQuery `form:"device-id,omitempty" json:"device-id,omitempty"`

	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetModuleParams defines parameters for GetModule.
type GetModuleParams struct {
	// DeviceId Device Identifier to use for the Query. If given, takes precedence over X-Device-ID or other hints.
	// Use to query data from devices in your account from another account.
	DeviceId *DeviceIDQuery `form:"device-id,omitempty" json:"device-id,omitempty"`

	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// CreateModuleParams defines parameters for CreateModule.
type CreateModuleParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register A Device
	// (POST /auth/register)
	Register(ctx echo.Context, params RegisterParams) error
	// Share your Account
	// (POST /auth/share)
	Share(ctx echo.Context, params ShareParams) error
	// Get All registered Devices for your Account
	// (GET /devices)
	GetDevices(ctx echo.Context, params GetDevicesParams) error
	// Checks if the Service is Available for Processing Request
	// (GET /health)
	IsHealthy(ctx echo.Context) error
	// Clears Module Data for a Device
	// (DELETE /module)
	DeleteModules(ctx echo.Context, params DeleteModulesParams) error
	// Get Module Data
	// (GET /module/{name})
	GetModule(ctx echo.Context, name ModuleName, params GetModuleParams) error
	// Create/Update Module Data
	// (POST /module/{name})
	CreateModule(ctx echo.Context, name ModuleName, params CreateModuleParams) error
	// Checks if the Service is Operational
	// (GET /ready)
	IsReady(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParams
	// ------------- Optional query parameter "share" -------------

	err = runtime.BindQueryParameter("form", true, false, "share", ctx.QueryParams(), &params.Share)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter share: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx, params)
	return err
}

// Share converts echo context to params.
func (w *ServerInterfaceWrapper) Share(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShareParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Share(ctx, params)
	return err
}

// GetDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevices(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDevicesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDevices(ctx, params)
	return err
}

// IsHealthy converts echo context to params.
func (w *ServerInterfaceWrapper) IsHealthy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsHealthy(ctx)
	return err
}

// DeleteModules converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteModules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteModulesParams
	// ------------- Optional query parameter "device-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "device-id", ctx.QueryParams(), &params.DeviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device-id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteModules(ctx, params)
	return err
}

// GetModule converts echo context to params.
func (w *ServerInterfaceWrapper) GetModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModuleParams
	// ------------- Optional query parameter "device-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "device-id", ctx.QueryParams(), &params.DeviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device-id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetModule(ctx, name, params)
	return err
}

// CreateModule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateModuleParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateModule(ctx, name, params)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/register", wrapper.Register)
	router.POST(baseURL+"/auth/share", wrapper.Share)
	router.GET(baseURL+"/devices", wrapper.GetDevices)
	router.GET(baseURL+"/health", wrapper.IsHealthy)
	router.DELETE(baseURL+"/module", wrapper.DeleteModules)
	router.GET(baseURL+"/module/:name", wrapper.GetModule)
	router.POST(baseURL+"/module/:name", wrapper.CreateModule)
	router.GET(baseURL+"/ready", wrapper.IsReady)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
