// Package REST provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220912230023-4a1477f6a8ba DO NOT EDIT.
package REST

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	DeviceAuthScopes = "deviceAuth.Scopes"
)

// Defines values for HealthResult.
const (
	Down HealthResult = "Down"
	Up   HealthResult = "Up"
)

// Device a device
type Device struct {
	// Id Device ID is the unique identifier for a remote device
	Id DeviceID `json:"id"`
}

// DeviceID Device ID is the unique identifier for a remote device
type DeviceID = openapi_types.UUID

// DeviceList list of devices
type DeviceList struct {
	// Count Amount of Items contained in List
	Count ListItemCount `json:"count"`

	// Items array of devices, it will always at least contain the device of the authenticated user
	Items []Device `json:"items"`
}

// HealthAggregation defines model for HealthAggregation.
type HealthAggregation struct {
	// Components The different Components of the Server
	Components *[]HealthAggregationComponent `json:"components,omitempty"`

	// Health A Health Check Result
	Health HealthResult `json:"health"`
}

// HealthAggregationComponent defines model for HealthAggregationComponent.
type HealthAggregationComponent struct {
	// Health A Health Check Result
	Health HealthResult `json:"health"`

	// Name The Name of the Component to be Health Checked
	Name string `json:"name"`
}

// HealthResult A Health Check Result
type HealthResult string

// ListItemCount Amount of Items contained in List
type ListItemCount = int

// ModifiedAtTimestamp A Timestamp indicating when a datum was last modified
type ModifiedAtTimestamp = time.Time

// ModuleDataStream Module Data Stream
type ModuleDataStream = openapi_types.File

// ModuleName Module Name
type ModuleName = string

// RegistrationResult defines model for RegistrationResult.
type RegistrationResult struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ShareResponse defines model for ShareResponse.
type ShareResponse struct {
	ShareCode *string `json:"shareCode,omitempty"`
}

// DeviceIDQuery Device ID is the unique identifier for a remote device
type DeviceIDQuery = DeviceID

// ShareCode defines model for ShareCode.
type ShareCode = string

// XDeviceID Device ID is the unique identifier for a remote device
type XDeviceID = DeviceID

// DeviceListResponse list of devices
type DeviceListResponse = DeviceList

// ModuleDataAccepted An Empty JSON
type ModuleDataAccepted = interface{}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	// Share The Share Code from the Share API. If presented in combination with a new Device ID,
	// it can be used to add new devices to an account.
	Share *ShareCode `form:"share,omitempty" json:"share,omitempty"`

	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ShareParams defines parameters for Share.
type ShareParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetDevicesParams defines parameters for GetDevices.
type GetDevicesParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetModuleParams defines parameters for GetModule.
type GetModuleParams struct {
	// DeviceId Device Identifier to use for the Query. If given, takes precedence over X-Device-ID or other hints.
	// Use to query data from devices in your account from another account.
	DeviceId *DeviceIDQuery `form:"device-id,omitempty" json:"device-id,omitempty"`

	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// CreateModuleParams defines parameters for CreateModule.
type CreateModuleParams struct {
	// XDeviceID Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register A Device
	// (POST /auth/register)
	Register(ctx echo.Context, params RegisterParams) error
	// Share your Account
	// (POST /auth/share)
	Share(ctx echo.Context, params ShareParams) error
	// Get All registered Devices for your Account
	// (GET /devices)
	GetDevices(ctx echo.Context, params GetDevicesParams) error
	// Checks if the Service is Available for Processing Request
	// (GET /health)
	IsHealthy(ctx echo.Context) error
	// Get Module Data
	// (GET /modules/{name})
	GetModule(ctx echo.Context, name ModuleName, params GetModuleParams) error
	// Create/Update Module Data
	// (POST /modules/{name})
	CreateModule(ctx echo.Context, name ModuleName, params CreateModuleParams) error
	// Checks if the Service is Operational
	// (GET /ready)
	IsReady(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParams
	// ------------- Optional query parameter "share" -------------

	err = runtime.BindQueryParameter("form", true, false, "share", ctx.QueryParams(), &params.Share)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter share: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx, params)
	return err
}

// Share converts echo context to params.
func (w *ServerInterfaceWrapper) Share(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShareParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Share(ctx, params)
	return err
}

// GetDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevices(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDevicesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDevices(ctx, params)
	return err
}

// IsHealthy converts echo context to params.
func (w *ServerInterfaceWrapper) IsHealthy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsHealthy(ctx)
	return err
}

// GetModule converts echo context to params.
func (w *ServerInterfaceWrapper) GetModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModuleParams
	// ------------- Optional query parameter "device-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "device-id", ctx.QueryParams(), &params.DeviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device-id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetModule(ctx, name, params)
	return err
}

// CreateModule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateModuleParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateModule(ctx, name, params)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/register", wrapper.Register)
	router.POST(baseURL+"/auth/share", wrapper.Share)
	router.GET(baseURL+"/devices", wrapper.GetDevices)
	router.GET(baseURL+"/health", wrapper.IsHealthy)
	router.GET(baseURL+"/modules/:name", wrapper.GetModule)
	router.POST(baseURL+"/modules/:name", wrapper.CreateModule)
	router.GET(baseURL+"/ready", wrapper.IsReady)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xZ328bvw3/VzRtDxtw9uXbYsAXfpqXdK2H/lrSYgXaPCgSbavVSVeJl8wI/L8PlO6n",
	"71LHXVvsqc2JosgPyQ8p+Z5LV5TOgsXAF/e8FF4UgODjXxdwqyWsLv5Vgd/RBwVBel2idpYv6mW2UmBR",
	"rzV4ho5VAdjaeYZbYHHfnK3WbKNvwWYMxRcIrPQgQYGVwNwtePZhljTNVhfMeeZwC55ttcUw/2TfByC1",
	"X0kVUwIFW3tXMBV3BKYt27nKMyGlqyymRWGTjvrjnGdck8FRCc+4FQXwBU86ZlrxjAe5hUKQj3/ysOYL",
	"/se8QyZPqyFvAOH7fcZfOVUZeB11HUJzhV5L7ENDmAiW9jT2lAK3nTnxn4x7+FppD4ov0FfwWMt6xpBt",
	"V1vh4dypCdPebYHFZUbrCTBsvy3frmLASg8BLIIihKUrbrQVpIDdadwywSzcsSb+Fxn7ZDUyKSy7AcoA",
	"RSETSkWxJlT0yR6LSSArBvHAXRkX0Gu7ic59aMMwcu691V+rQUq6dfROCmO03dQ2RxfbT5RUYFXpKOUy",
	"VlQByY8BBM4r8J8surTiSvBmx0SFWzpJCgTVurQFocB3PvXy+7vj28u8fdIBAf/ulIZYqSn85MllWqKP",
	"0lkEG/8rytKQldrZ3EkEnAX0IApaOyXB6ISrtDMaMkQ/ySRAWymyNpTOBuhxyksd8LL+/A1TPwfSe38S",
	"RqR6yrg6W2mZ0XFCW4p+URnUJVmd0pS3lU1uLKWEEilYJ9g4PHdp2bOixB3759Wb18dQ2zhkzZmRMt56",
	"JyGEmPrZIMxHwfulcc7qrI8x/jB75RSVn5otcYzIv7dgmQesvAWVMW1VLKDA7miBqpVIQYNKfH8nAjMi",
	"ICtqpXN+AivGHUt8pwsIKIqS/CGPapEuJcd2ipq6eMZTxWNdbVqd1Ci6iv9IW6+zhtPczWeQSIF9mNFa",
	"kmU6RGyqRHH6sLV4KBxCZ/La+UIgX/Cqih3ugEezXiWOTzVUJW7dcPcIgcjhx0Ag1SuE4jwK7zOuEYow",
	"gbP3Ytc7LWMa2Z02hglzJ3aBCWQGRFe3EYck3PD7gImpBRH/tucdDxWZV2i7Sjt+a+GKtvGMJ9TrZSLu",
	"w8AmRJozp2L8AoTB7XKz8bARyfX7Eaz9YWzct5Ver8GDRXbeSjYIXIG/fbzXI2NahWTqwPl9rG2D28fp",
	"vIRQGRwlfq3iUcB0towQ+h5LmkY8hShNTA2C7bEstfmkhZ1vQX6BiRI68LCe3446Wps1bhSDA1ktlnGw",
	"VUH635c84xfuzvZ0d9U8LLax8iKOx27NYg43lZSGm8gBrU5tETbg634z4s8Ju9vFhsupsUYyF0ThVTHm",
	"8D5BKYEwQx3RG/k16kej8ye7UaucBtc4YD6geXp+r3W+FtNGXcJGB/QxWbtwDjO1FCHcOa8mZtiME0E1",
	"SfntrGols07jVG7F8b0/FQytCf0LwfjEA3XUH0FWXuPuikoKaj4iplxWqf5irdGmGxG07FDaIpZpaID/",
	"INluLpyc4LPnGl9UN0St3tTbwiLPNxq31c1cuiL/LL64m1nhwBjwM2lcpWio0bOws3IWEt9RW7Fr18xB",
	"QsZQQCE0aa0//W2gaq4i3R+SgQ5Ni30jUbOrnZU1qdLAYbSEGtl6rF+WQm6BPZmf/a9O5DfG3eSF0DZ/",
	"uTp/9vrqWSRhjYbOObSGZ/wWfEhm3/5Goq4EK0rNF/zp/Gz+NOYKbiPoOXXG3MeEBR8Tw011/MtaYni3",
	"y2karTsbpVPM+JXqycezukeDj9PE3Ink3e1tnx0V7u6x++uDi8STs7MfdnOYqOeJsfeqkjSLryvD+htS",
	"uVRFQTzTA3JZg0ilITaEDadY8GuST2FJt90HY3LuIc7FCEXpvPC73sU9xLGPFBDZxjeQh0J1Vd+pvztO",
	"PxP6IW9Nod69VfTEOoKKvvSp6eM1GdwFJCk4QGgiIs2su7jnG5isEAn6trkopn4TR29jRs9RD4XiOeBF",
	"N1L/4HhMKWjl8omL90kwPgdkS2NYQyWgmitzROEBfBtQE8Td9DaJ8Fvw1LcDE80oJOMoVM9nL969e8su",
	"XZVYZwjsKqQdO/4Tc3U8wX+bJZK8thDCAUnEES8w3Y3ulFI6sOWt0EbcGDi4/bPmXaeDthk0I7JFHFhC",
	"fk/NaX80h9OcBIr1hqepZG3fK38ixw9fmR+xof/W+V2lMPGMcnIpDIFrYlKHgV/vswf77AkRSA3gVwRh",
	"hGnzwLh7GM7eG2Q+foDcjyLz5JTItC9vJ0UmAZa/L+lOcTRGVDgeRPLxGCNdglCxlGtS+nN8CVdQglVg",
	"pY7sL02lQP1lgp4u4zn/R+TU+kOR+uvZ019ryD+ENpUHpiqf2K0BNzLjY9nyTQOyMJPEGFOHZuZQZ87h",
	"9d+t11pqYerR+g/jSd7vjAlzmtjnSvgvYOdQ5XHqHlV2ZZlG9tJJYcyOoWPod/TFVThUvMhzQ1JbF3Dx",
	"+9nvZ1HhdevBoeZnt+B31EgIKBNfuNCxZffkRWLtzw1xpBmbt4yRp43xLvGqroJ2W1MW450ri+CFxPTb",
	"T6//937Z6f8Id/gLW/imNb0myfJeIqxsusMPfKtDu7/e/zcAAP//muHwzbocAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
