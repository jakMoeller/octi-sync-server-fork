// Package REST provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package REST

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	DeviceAuthScopes = "deviceAuth.Scopes"
)

// Defines values for HealthResult.
const (
	Down HealthResult = "Down"
	Up   HealthResult = "Up"
)

// a device
type Device struct {
	// Device ID is the unique identifier for a remote device
	Id DeviceID `json:"id"`
}

// Device ID is the unique identifier for a remote device
type DeviceID = openapi_types.UUID

// list of devices
type DeviceList struct {
	// Amount of Items contained in List
	Count ListItemCount `json:"count"`

	// array of devices, it will always at least contain the device of the authenticated user
	Items []Device `json:"items"`
}

// HealthAggregation defines model for HealthAggregation.
type HealthAggregation struct {
	// The different Components of the Server
	Components *[]HealthAggregationComponent `json:"components,omitempty"`

	// A Health Check Result
	Health HealthResult `json:"health"`
}

// HealthAggregationComponent defines model for HealthAggregationComponent.
type HealthAggregationComponent struct {
	// A Health Check Result
	Health HealthResult `json:"health"`

	// The Name of the Component to be Health Checked
	Name string `json:"name"`
}

// A Health Check Result
type HealthResult string

// Amount of Items contained in List
type ListItemCount = int

// Module Data Stream
type ModuleDataStream = string

// Module Name
type ModuleName = string

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	// Device ID is the unique identifier for a remote device
	DeviceID DeviceID `json:"deviceID"`
	Password string   `json:"password"`
	Username string   `json:"username"`
}

// ShareResponse defines model for ShareResponse.
type ShareResponse struct {
	ShareCode *string `json:"shareCode,omitempty"`
}

// ShareCode defines model for ShareCode.
type ShareCode = string

// Device ID is the unique identifier for a remote device
type XDeviceID = DeviceID

// list of devices
type DeviceListResponse = DeviceList

// An Empty JSON
type ModuleDataAccepted = interface{}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	// Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ShareParams defines parameters for Share.
type ShareParams struct {
	// Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetDevicesParams defines parameters for GetDevices.
type GetDevicesParams struct {
	// The Share Code from the Share API. If presented in combination with a new Device ID,
	// it can be used to add new devices to an account.
	Share *ShareCode `form:"share,omitempty" json:"share,omitempty"`

	// Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// GetModuleParams defines parameters for GetModule.
type GetModuleParams struct {
	// The Share Code from the Share API. If presented in combination with a new Device ID,
	// it can be used to add new devices to an account.
	Share *ShareCode `form:"share,omitempty" json:"share,omitempty"`

	// Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// CreateModuleParams defines parameters for CreateModule.
type CreateModuleParams struct {
	// The Share Code from the Share API. If presented in combination with a new Device ID,
	// it can be used to add new devices to an account.
	Share *ShareCode `form:"share,omitempty" json:"share,omitempty"`

	// Unique Identifier of the calling Device. If calling Data endpoints, must be presented in order
	// to be properly authenticated.
	XDeviceID XDeviceID `json:"X-Device-ID"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register A Device
	// (POST /auth/register)
	Register(ctx echo.Context, params RegisterParams) error
	// Share your Account
	// (POST /auth/share)
	Share(ctx echo.Context, params ShareParams) error
	// Get All registered Devices for your Account
	// (GET /devices)
	GetDevices(ctx echo.Context, params GetDevicesParams) error
	// Checks if the Service is Available for Processing Request
	// (GET /health)
	IsHealthy(ctx echo.Context) error
	// Get Module Data
	// (GET /modules/{name})
	GetModule(ctx echo.Context, name ModuleName, params GetModuleParams) error
	// Create/Update Module Data
	// (POST /modules/{name})
	CreateModule(ctx echo.Context, name ModuleName, params CreateModuleParams) error
	// Checks if the Service is Operational
	// (GET /ready)
	IsReady(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx, params)
	return err
}

// Share converts echo context to params.
func (w *ServerInterfaceWrapper) Share(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShareParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Share(ctx, params)
	return err
}

// GetDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevices(ctx echo.Context) error {
	var err error

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDevicesParams
	// ------------- Optional query parameter "share" -------------

	err = runtime.BindQueryParameter("form", true, false, "share", ctx.QueryParams(), &params.Share)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter share: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDevices(ctx, params)
	return err
}

// IsHealthy converts echo context to params.
func (w *ServerInterfaceWrapper) IsHealthy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsHealthy(ctx)
	return err
}

// GetModule converts echo context to params.
func (w *ServerInterfaceWrapper) GetModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModuleParams
	// ------------- Optional query parameter "share" -------------

	err = runtime.BindQueryParameter("form", true, false, "share", ctx.QueryParams(), &params.Share)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter share: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetModule(ctx, name, params)
	return err
}

// CreateModule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateModule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name ModuleName

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(DeviceAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateModuleParams
	// ------------- Optional query parameter "share" -------------

	err = runtime.BindQueryParameter("form", true, false, "share", ctx.QueryParams(), &params.Share)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter share: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Device-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Device-ID")]; found {
		var XDeviceID XDeviceID
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Device-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Device-ID", runtime.ParamLocationHeader, valueList[0], &XDeviceID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Device-ID: %s", err))
		}

		params.XDeviceID = XDeviceID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Device-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateModule(ctx, name, params)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/register", wrapper.Register)
	router.POST(baseURL+"/auth/share", wrapper.Share)
	router.GET(baseURL+"/devices", wrapper.GetDevices)
	router.GET(baseURL+"/health", wrapper.IsHealthy)
	router.GET(baseURL+"/modules/:name", wrapper.GetModule)
	router.POST(baseURL+"/modules/:name", wrapper.CreateModule)
	router.GET(baseURL+"/ready", wrapper.IsReady)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
